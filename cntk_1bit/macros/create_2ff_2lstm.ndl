load=ndlMacroDefine
run=ndlCreateNetwork

ndlMacroDefine=[
    # Macro definitions

    MeanVarNorm(x)
    {   
	xMean = Mean(x)
    	xStdDev = InvStdDev(x)
    	xNorm=PerDimMeanVarNormalization(x,xMean,xStdDev)
    }
	
	# Mean Square Error FeedForward
    MSEBFF(x,r,c,labels)
    {
        BFF=BFF(x,r,c)
        MSE=SquareError(labels,BFF)
    }

    LSTMComponent(inputDim, outputDim, inputVal)
    {
        Wxo = Parameter(outputDim, inputDim)
        Wxi = Parameter(outputDim, inputDim)
        Wxf = Parameter(outputDim, inputDim)
        Wxc = Parameter(outputDim, inputDim)

        bo = Parameter(outputDim, init=fixedvalue, value=-1.0)
        bc = Parameter(outputDim, init=fixedvalue, value=0.0)
        bi = Parameter(outputDim, init=fixedvalue, value=-1.0)
        bf = Parameter(outputDim, init=fixedvalue, value=-1.0)

        Whi = Parameter(outputDim, outputDim)
        Wci = Parameter(outputDim)
        Whf = Parameter(outputDim, outputDim)
        Wcf = Parameter(outputDim)
        Who = Parameter(outputDim, outputDim)
        Wco = Parameter(outputDim)
        Whc = Parameter(outputDim, outputDim)

        delayHI = Delay(outputDim, output, delayTime=1)
        delayHF = Delay(outputDim, output, delayTime=1)
        delayHO = Delay(outputDim, output, delayTime=1)
        delayHC = Delay(outputDim, output, delayTime=1)
        delayCI = Delay(outputDim, ct, delayTime=1)
        delayCF = Delay(outputDim, ct, delayTime=1)
        delayCC = Delay(outputDim, ct, delayTime=1)

        WxiInput = Times(Wxi, inputVal)
        WhidelayHI = Times(Whi, delayHI)
        WcidelayCI = DiagTimes(Wci, delayCI)

        it = Sigmoid (Plus ( Plus (Plus (WxiInput, bi), WhidelayHI), WcidelayCI))

        WxcInput = Times(Wxc, inputVal)
        WhcdelayHC = Times(Whc, delayHC)
        bit = ElementTimes(it, Tanh( Plus(WxcInput, Plus(WhcdelayHC, bc))))
        
        Wxfinput = Times(Wxf, inputVal)
        WhfdelayHF = Times(Whf, delayHF)
        WcfdelayCF = DiagTimes(Wcf, delayCF)

        ft = Sigmoid( Plus (Plus (Plus(Wxfinput, bf), WhfdelayHF), WcfdelayCF))

        bft = ElementTimes(ft, delayCC)

        ct = Plus(bft, bit)

        Wxoinput = Times(Wxo, inputVal)
        WhodelayHO = Times(Who, delayHO)
        Wcoct = DiagTimes(Wco, ct)

        ot = Sigmoid( Plus( Plus( Plus(Wxoinput, bo), WhodelayHO), Wcoct))

        output = ElementTimes(ot, Tanh(ct))
        
        
    }


]


ndlCreateNetwork=[

	#define basic i/o
	featInDim=$InDim$
	featOutDim=$OutDim$
	hiddenDim=$HiddenDim$
	featIn=Input(featInDim,tag=feature)
	featOut=Input(featOutDim,tag=label)
			       			       
	 # define network
	 #featNormIn = MeanVarNorm(featIn)
	 featNormOut = MeanVarNorm(featOut)
	 L1 = SBFF(featIn,hiddenDim,featInDim)
	 L2 = SBFF(L1,hiddenDim,hiddenDim)
	 L3 = LSTMComponent(hiddenDim, hiddenDim, L2)
	 LSTMoutput = LSTMComponent(hiddenDim, hiddenDim, L3)
	 MeanSqErr = MSEBFF(LSTMoutput, featOutDim, hiddenDim, featNormOut,tag=criteria)
 	 OutputNodes=PerDimMeanVarDeNormalization(MeanSqErr.BFF.FF.P,featNormOut.xMean,featNormOut.xStdDev)
	 EvalNodes=(MeanSqErr)
	 
]
